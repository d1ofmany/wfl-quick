{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","showAll","setShowAll","meal","setMeal","getRandomMeal","randomMealIndex","Math","floor","random","meals","length","newMeal","useEffect","id","onClick","map","mealItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAsCeA,MAlCf,WAAgB,IAAD,EACiBC,oBAAS,GAD1B,mBACNC,EADM,KACGC,EADH,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,KAIPC,EAAgB,WACpB,IAAMC,EAAkBC,KAAKC,MAAMD,KAAKE,SAAWC,EAAMC,QAEnDC,EAAUF,EAAMJ,GAEtBF,EAAQQ,IAOV,OAJAC,qBAAU,WACRR,MACC,IAGD,8BACE,kCACIJ,GAAW,sBAAKa,GAAG,aAAR,UACX,6BAAKX,IACL,wBAAQY,QAAS,kBAAMV,KAAvB,qBAEDJ,GAAW,8BACV,6BACGS,EAAMM,KAAI,SAAAC,GAAQ,OAAI,6BAAoBA,GAAXA,UAGpC,wBAAQH,GAAG,UAAUC,QAAS,kBAAMb,GAAYD,IAAhD,SAA2DA,EAAU,cAAiB,mBCpB/EiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.3e1bc643.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport meals from './meals';\n\nfunction App() {\n  const [showAll, setShowAll] = useState(false);\n  const [meal, setMeal] = useState('');\n\n  const getRandomMeal = () => {\n    const randomMealIndex = Math.floor(Math.random() * meals.length)\n\n    const newMeal = meals[randomMealIndex];\n\n    setMeal(newMeal);\n  }\n\n  useEffect(() => {\n    getRandomMeal();\n  }, []);\n\n  return (\n    <div>\n      <main>\n        {!showAll && <div id=\"randomMeal\">\n          <h1>{meal}</h1>\n          <button onClick={() => getRandomMeal()}>Next</button>\n        </div>}\n        {showAll && <div>\n          <ul>\n            {meals.map(mealItem => <li key={mealItem}>{mealItem}</li>)}\n          </ul>\n        </div>}\n        <button id=\"showAll\" onClick={() => setShowAll(!showAll)}>{showAll ? \"Show Random\" :  \"Show All\"}</button>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}